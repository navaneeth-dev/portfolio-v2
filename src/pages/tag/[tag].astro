---
import BaseHead from "../../components/BaseHead.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../config";
import Footer from "../../components/Footer.astro";
import Header from "../../components/Header.astro";
import { Image } from "astro:assets";
import { CollectionEntry, getCollection } from "astro:content";

export async function getStaticPaths() {
  const allPostsSorted = (await getCollection("blog")).sort(
    (a, b) =>
      new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf()
  );

  const tags = new Set<string>();
  allPostsSorted.forEach((post) => {
    post.data.tags.forEach((tag: any) => tags.add(tag));
  });

  return [...tags].map((tag) => {
    const posts = allPostsSorted.filter((post) => post.data.tags.includes(tag));
    return {
      params: {
        tag,
      },
      props: {
        posts,
      },
    };
  });
}

type Props = {
  posts: CollectionEntry<"blog">[];
};

const { posts } = Astro.props;
const { tag } = Astro.params;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title={`Posts With Tag ${tag}`} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header />
    <main class="pt-6 pb-12">
      <div class="mb-6 container mx-auto px-12">
        <h1 class="text-3xl font-bold text-primary capitalize">
          Posts With Tag {tag}
        </h1>
        <ul class="grid grid-flow-row auto-rows-[1fr] grid-row gap-6 mt-6">
          {
            posts.map((post) => (
              <li class="border border-neutral-400 rounded-lg">
                <div class="bg-white rounded-lg flex flex-col md:grid md:grid-cols-[30%_70%] gap-3 h-full">
                  <div class="w-full h-[173px] md:h-full relative">
                    <Image
                      width={256}
                      height={480}
                      src={
                        post.data.image ? post.data.image : "/placeholder.png"
                      }
                      alt={post.data.title}
                      class="size w-full h-full rounded-t-lg object-cover md:rounded-l-lg md:rounded-none absolute inset-0 border-r border-neutral-400"
                    />
                  </div>
                  <div class="p-2">
                    <time
                      datetime={post.data.pubDate}
                      class="text-sm text-gray-700"
                    >
                      {new Date(post.data.pubDate).toLocaleDateString("en-us", {
                        year: "numeric",
                        month: "short",
                        day: "numeric",
                      })}
                    </time>
                    <h2 class="text-xl font-bold mb-2 text-primary">
                      <a href={post.url} class="hover:underline">
                        {post.data.title}
                      </a>
                    </h2>
                    <div class="flex gap-2">
                      {post.data.tags.map((tag: string) => (
                        <a
                          class="inline uppercase border border-black px-2 text-sm hover:bg-neutral-100"
                          href={"/tag/" + tag}
                        >
                          {tag}
                        </a>
                      ))}
                    </div>
                    <p class="mt-2 text-neutral-700">{post.data.description}</p>
                  </div>
                </div>
              </li>
            ))
          }
        </ul>
      </div>
    </main>
    <Footer />
  </body>
</html>
